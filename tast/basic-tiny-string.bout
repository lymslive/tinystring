## tast_basic_tiny
-- sizeof typical tiny string
|| sizeof(str16) =~? 16 [OK]
|| sizeof(str32) =~? 32 [OK]
|| sizeof(str64) =~? 64 [OK]
|| sizeof(str128) =~? 128 [OK]
|| sizeof(str256) =~? 256 [OK]
-- and capaicty, should = sizeof - 1
|| str16.capacity() =~? 15 [OK]
|| str32.capacity() =~? 31 [OK]
|| str64.capacity() =~? 63 [OK]
|| str128.capacity() =~? 127 [OK]
|| str256.capacity() =~? 255 [OK]
-- default empy zero length string
|| str16.size() =~? 0 [OK]
|| str32.size() =~? 0 [OK]
|| str64.size() =~? 0 [OK]
|| str128.size() =~? 0 [OK]
|| str256.size() =~? 0 [OK]
-- normally grow string with append() method
1358042**98
|| str16.capacity() =~? 15 [OK]
|| str16.size() =~? 11 [OK]
31 33 35 38 30 34 32 2A 2A 39 38 0 0 0 0 B 
-- str16 can store dec digits 0-9
0123456789
|| str16.capacity() =~? 15 [OK]
|| str16.size() =~? 10 [OK]
30 31 32 33 34 35 36 37 38 39 0 0 0 0 0 A 
-- .. but cannot store hex digits, as must end with '\0'
0123456789ABCDE
|| str16.capacity() =~? 15 [OK]
|| str16.size() =~? 15 [OK]
30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 0 
-- str32 is enough to store all a-z 26 letters
abcdefghijklmnopqrstuvwxyz
|| str32.size() =~? 26 [OK]
61 62 63 64 65 66 67 68 69 6A 6B 6C 6D 6E 6F 70 71 72 73 74 75 76 77 78 79 7A 0 0 0 0 0 1A 
-- tiny string is fixed capacity, guard not overflow
abcdefghijklmnopqrstuvwxyzABCDE
|| str32.size() =~? 31 [OK]
61 62 63 64 65 66 67 68 69 6A 6B 6C 6D 6E 6F 70 71 72 73 74 75 76 77 78 79 7A 41 42 43 44 45 0 
<< [PASS] tast_basic_tiny

## tast_operator
-- new tiny string in heap
|| p32->capacity() =~? 31 [OK]
|| p32->size() =~? 4 [OK]
|| p32->length() =~? 4 [OK]
1234
-- push_back(c)
|| p32->size() =~? 5 [OK]
1234$
-- operator += char or string, based append
|| p32->size() =~? 10 [OK]
1234$$4321
-- operator << chains
|| p32->size() =~? 16 [OK]
1234$$4321#@abcd
-- define tiny string in stack
|| s32.size() =~? 4 [OK]
abcd
-- default operator= for tiny string, memory copy
|| s32.size() =~? 16 [OK]
1234$$4321#@abcd
|| s32 == *p32 =~? ture [OK]
|| p32->size() =~? 0 [OK]
|| p32->empty() =~? ture [OK]
<< [PASS] tast_operator

## tast_ustring_conversion
-- convert ustring to basic_tiny_string of different size
|| str.capacity() =~? 15 [OK]
|| p16 != nullptr =~? ture [OK]
|| str.capacity() =~? 31 [OK]
|| p32 != nullptr =~? ture [OK]
|| str.capacity() =~? 63 [OK]
|| p64 != nullptr =~? ture [OK]
|| str.capacity() =~? 127 [OK]
|| p128 != nullptr =~? ture [OK]
|| str.capacity() =~? 255 [OK]
|| p256 != nullptr =~? ture [OK]
|| str.capacity() =~? 510
|| p512 != nullptr =~? false [OK]
|| str.small_string() =~? false [OK]
|| str.middle_string() =~? ture [OK]
|| str.size() =~? 0
-- convert basic_tiny_string to usting with operator=
|| p32 != nullptr =~? ture [OK]
-- convert basic_tiny_string to usting with constructor
|| p32 != nullptr =~? ture [OK]
<< [PASS] tast_ustring_conversion

## tast_ustring_autolarge
|| str.capacity() =~? 15
|| str.size() =~? 0
push a-z times: 0
|| str.capacity() =~? 31
|| str.size() =~? 26 [OK]
abcdefghijklmnopqrstuvwxyz
|| str.capacity() =~? 63
|| str.size() =~? 52 [OK]
abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ
push a-z times: 1
|| str.capacity() =~? 127
|| str.size() =~? 78 [OK]
abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz
|| str.capacity() =~? 127
|| str.size() =~? 104 [OK]
abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ
push a-z times: 2
|| str.capacity() =~? 255
|| str.size() =~? 130 [OK]
abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz
|| str.capacity() =~? 255
|| str.size() =~? 156 [OK]
abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ
push a-z times: 3
|| str.capacity() =~? 255
|| str.size() =~? 182 [OK]
abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz
|| str.capacity() =~? 255
|| str.size() =~? 208 [OK]
abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ
push a-z times: 4
|| str.capacity() =~? 255
|| str.size() =~? 234 [OK]
abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz
|| str.capacity() =~? 382
|| str.size() =~? 260 [OK]
abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ
<< [PASS] tast_ustring_autolarge

## tast_ustring_autolarge_appendc
|| str.capacity() =~? 15
|| str.size() =~? 0
|| str.capacity() =~? 63
|| str.size() =~? 52 [OK]
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz
|| str.capacity() =~? 127
|| str.size() =~? 104 [OK]
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz
|| str.capacity() =~? 255
|| str.size() =~? 156 [OK]
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz
|| str.capacity() =~? 255
|| str.size() =~? 208 [OK]
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz
|| str.capacity() =~? 382
|| str.size() =~? 260 [OK]
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz
<< [PASS] tast_ustring_autolarge_appendc

## tast_ustring_compare
-- prepare lowStr and upStr:
abcdefghijklmnopqrstuvwxyz
ABCDEFGHIJKLMNOPQRSTUVWXYZ
-- compre them with operators:
|| lowStr == upStr =~? false [OK]
|| lowStr != upStr =~? ture [OK]
|| lowStr <= upStr =~? false [OK]
|| lowStr >= upStr =~? ture [OK]
|| lowStr < upStr =~? false [OK]
|| lowStr > upStr =~? ture [OK]
-- make a copy of lowStr
|| lowStr == lowCopy =~? ture [OK]
|| lowStr != lowCopy =~? false [OK]
-- make double copy of lowStr
abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz
|| lowStr < doubleCopy =~? ture [OK]
|| lowStr > doubleCopy =~? false [OK]
-- move operator:
|| upStr == upMoveTo =~? false [OK]
|| upStr != upMoveTo =~? ture [OK]
|| upStr.empty() =~? ture [OK]
|| preMove == postMove =~? ture [OK]
<< [PASS] tast_ustring_compare

## Summary
<< [PASS] 6
<< [FAIL] 0

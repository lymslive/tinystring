## tast_pool_alone
-- alloctor property
|| sizeof(allocator) =~? 1 [OK]
|| allocator == other =~? ture [OK]
-- alloc 32
>> malloc free space: 512/32
>> Split free bock: 32[0]
>> Return free bock: 32[0]
|| p32 != nullptr =~? ture [OK]
beyondAllocTimes = 0
beyondFreeTimes = 0
allocateTimes = 1
allocateSpace = 32
deallocateTimes = 0
deallocateSpace = 0
freeSpace = 256
freeBlock(32) = 7
freeBlock(64) = 0
freeBlock(128) = 0
freeBlock(256) = 0
totalTimes = 1
total = 512
blance = 0

-- alloc 64
>> Split free bock: 64[1]
>> Return free bock: 64[1]
|| p64 != nullptr =~? ture [OK]
beyondAllocTimes = 0
beyondFreeTimes = 0
allocateTimes = 2
allocateSpace = 96
deallocateTimes = 0
deallocateSpace = 0
freeSpace = 0
freeBlock(32) = 7
freeBlock(64) = 3
freeBlock(128) = 0
freeBlock(256) = 0
totalTimes = 1
total = 512
blance = 0

-- alloc 128
>> malloc free space: 2048/128
>> Split free bock: 128[2]
>> Return free bock: 128[2]
|| p128 != nullptr =~? ture [OK]
beyondAllocTimes = 0
beyondFreeTimes = 0
allocateTimes = 3
allocateSpace = 224
deallocateTimes = 0
deallocateSpace = 0
freeSpace = 1024
freeBlock(32) = 7
freeBlock(64) = 3
freeBlock(128) = 7
freeBlock(256) = 0
totalTimes = 2
total = 2560
blance = 0

-- alloc 256
>> Split free bock: 256[3]
>> Return free bock: 256[3]
|| p256 != nullptr =~? ture [OK]
beyondAllocTimes = 0
beyondFreeTimes = 0
allocateTimes = 4
allocateSpace = 480
deallocateTimes = 0
deallocateSpace = 0
freeSpace = 0
freeBlock(32) = 7
freeBlock(64) = 3
freeBlock(128) = 7
freeBlock(256) = 3
totalTimes = 2
total = 2560
blance = 0

-- alloc 300: should not alloc in pool
>> new space beyond pool
|| p300 != nullptr =~? ture [OK]
beyondAllocTimes = 1
beyondFreeTimes = 0
allocateTimes = 4
allocateSpace = 480
deallocateTimes = 0
deallocateSpace = 0
freeSpace = 0
freeBlock(32) = 7
freeBlock(64) = 3
freeBlock(128) = 7
freeBlock(256) = 3
totalTimes = 2
total = 2560
blance = 0

-- alloc 200: should actually alloc 256
>> Return free bock: 256[3]
|| p200 != nullptr =~? ture [OK]
beyondAllocTimes = 1
beyondFreeTimes = 0
allocateTimes = 5
allocateSpace = 736
deallocateTimes = 0
deallocateSpace = 0
freeSpace = 0
freeBlock(32) = 7
freeBlock(64) = 3
freeBlock(128) = 7
freeBlock(256) = 2
totalTimes = 2
total = 2560
blance = 0

-- alloc 100: actually alloc 128
>> Return free bock: 128[2]
|| p100 != nullptr =~? ture [OK]
beyondAllocTimes = 1
beyondFreeTimes = 0
allocateTimes = 6
allocateSpace = 864
deallocateTimes = 0
deallocateSpace = 0
freeSpace = 0
freeBlock(32) = 7
freeBlock(64) = 3
freeBlock(128) = 6
freeBlock(256) = 2
totalTimes = 2
total = 2560
blance = 0

-- alloc 50: actually alloc 64
>> Return free bock: 64[1]
|| p50 != nullptr =~? ture [OK]
beyondAllocTimes = 1
beyondFreeTimes = 0
allocateTimes = 7
allocateSpace = 928
deallocateTimes = 0
deallocateSpace = 0
freeSpace = 0
freeBlock(32) = 7
freeBlock(64) = 2
freeBlock(128) = 6
freeBlock(256) = 2
totalTimes = 2
total = 2560
blance = 0

-- alloc 25: actually alloc 32
>> Return free bock: 32[0]
|| p25 != nullptr =~? ture [OK]
beyondAllocTimes = 1
beyondFreeTimes = 0
allocateTimes = 8
allocateSpace = 960
deallocateTimes = 0
deallocateSpace = 0
freeSpace = 0
freeBlock(32) = 6
freeBlock(64) = 2
freeBlock(128) = 6
freeBlock(256) = 2
totalTimes = 2
total = 2560
blance = 0

-- alloc 12: actually alloc 32, min block in pool
>> Return free bock: 32[0]
|| p12 != nullptr =~? ture [OK]
beyondAllocTimes = 1
beyondFreeTimes = 0
allocateTimes = 9
allocateSpace = 992
deallocateTimes = 0
deallocateSpace = 0
freeSpace = 0
freeBlock(32) = 5
freeBlock(64) = 2
freeBlock(128) = 6
freeBlock(256) = 2
totalTimes = 2
total = 2560
blance = 0

-- free 32 64 128 256 blocks
beyondAllocTimes = 1
beyondFreeTimes = 0
allocateTimes = 9
allocateSpace = 992
deallocateTimes = 4
deallocateSpace = 480
freeSpace = 0
freeBlock(32) = 6
freeBlock(64) = 3
freeBlock(128) = 7
freeBlock(256) = 3
totalTimes = 2
total = 2560
blance = 0

-- free 300: also not free by pool
>> delete space beyond pool
beyondAllocTimes = 1
beyondFreeTimes = 1
allocateTimes = 9
allocateSpace = 992
deallocateTimes = 4
deallocateSpace = 480
freeSpace = 0
freeBlock(32) = 6
freeBlock(64) = 3
freeBlock(128) = 7
freeBlock(256) = 3
totalTimes = 2
total = 2560
blance = 0

-- free 200: pass the actually size or not don't matter
beyondAllocTimes = 1
beyondFreeTimes = 1
allocateTimes = 9
allocateSpace = 992
deallocateTimes = 5
deallocateSpace = 736
freeSpace = 0
freeBlock(32) = 6
freeBlock(64) = 3
freeBlock(128) = 7
freeBlock(256) = 4
totalTimes = 2
total = 2560
blance = 0

-- free 100
beyondAllocTimes = 1
beyondFreeTimes = 1
allocateTimes = 9
allocateSpace = 992
deallocateTimes = 6
deallocateSpace = 864
freeSpace = 0
freeBlock(32) = 6
freeBlock(64) = 3
freeBlock(128) = 8
freeBlock(256) = 4
totalTimes = 2
total = 2560
blance = 0

-- free 50
beyondAllocTimes = 1
beyondFreeTimes = 1
allocateTimes = 9
allocateSpace = 992
deallocateTimes = 7
deallocateSpace = 928
freeSpace = 0
freeBlock(32) = 6
freeBlock(64) = 4
freeBlock(128) = 8
freeBlock(256) = 4
totalTimes = 2
total = 2560
blance = 0

-- free 25
-- free 12
beyondAllocTimes = 1
beyondFreeTimes = 1
allocateTimes = 9
allocateSpace = 992
deallocateTimes = 9
deallocateSpace = 992
freeSpace = 0
freeBlock(32) = 8
freeBlock(64) = 4
freeBlock(128) = 8
freeBlock(256) = 4
totalTimes = 2
total = 2560
blance = 0

<< [PASS] tast_pool_alone

## tast_alloc_lot
>> Return free bock: 32[0]
>> Return free bock: 64[1]
>> Return free bock: 128[2]
>> Return free bock: 256[3]
>> new space beyond pool
>> new space beyond pool
>> delete space beyond pool
-- loop i = 0
beyondAllocTimes = 3
beyondFreeTimes = 2
allocateTimes = 13
allocateSpace = 1472
deallocateTimes = 13
deallocateSpace = 1472
freeSpace = 0
freeBlock(32) = 8
freeBlock(64) = 4
freeBlock(128) = 8
freeBlock(256) = 4
totalTimes = 2
total = 2560
blance = 0

>> delete space beyond pool
>> Return free bock: 32[0]
>> Return free bock: 64[1]
>> Return free bock: 128[2]
>> Return free bock: 256[3]
>> new space beyond pool
>> new space beyond pool
>> delete space beyond pool
-- loop i = 1
beyondAllocTimes = 5
beyondFreeTimes = 4
allocateTimes = 17
allocateSpace = 1952
deallocateTimes = 17
deallocateSpace = 1952
freeSpace = 0
freeBlock(32) = 8
freeBlock(64) = 4
freeBlock(128) = 8
freeBlock(256) = 4
totalTimes = 2
total = 2560
blance = 0

>> delete space beyond pool
>> Return free bock: 32[0]
>> Return free bock: 64[1]
>> Return free bock: 128[2]
>> Return free bock: 256[3]
>> new space beyond pool
>> new space beyond pool
>> delete space beyond pool
-- loop i = 2
beyondAllocTimes = 7
beyondFreeTimes = 6
allocateTimes = 21
allocateSpace = 2432
deallocateTimes = 21
deallocateSpace = 2432
freeSpace = 0
freeBlock(32) = 8
freeBlock(64) = 4
freeBlock(128) = 8
freeBlock(256) = 4
totalTimes = 2
total = 2560
blance = 0

>> delete space beyond pool
>> Return free bock: 32[0]
>> Return free bock: 64[1]
>> Return free bock: 128[2]
>> Return free bock: 256[3]
>> new space beyond pool
>> new space beyond pool
>> delete space beyond pool
-- loop i = 3
beyondAllocTimes = 9
beyondFreeTimes = 8
allocateTimes = 25
allocateSpace = 2912
deallocateTimes = 25
deallocateSpace = 2912
freeSpace = 0
freeBlock(32) = 8
freeBlock(64) = 4
freeBlock(128) = 8
freeBlock(256) = 4
totalTimes = 2
total = 2560
blance = 0

>> delete space beyond pool
>> Return free bock: 32[0]
>> Return free bock: 64[1]
>> Return free bock: 128[2]
>> Return free bock: 256[3]
>> new space beyond pool
>> new space beyond pool
>> delete space beyond pool
-- loop i = 4
beyondAllocTimes = 11
beyondFreeTimes = 10
allocateTimes = 29
allocateSpace = 3392
deallocateTimes = 29
deallocateSpace = 3392
freeSpace = 0
freeBlock(32) = 8
freeBlock(64) = 4
freeBlock(128) = 8
freeBlock(256) = 4
totalTimes = 2
total = 2560
blance = 0

>> delete space beyond pool
>> Return free bock: 32[0]
>> Return free bock: 64[1]
>> Return free bock: 128[2]
>> Return free bock: 256[3]
>> new space beyond pool
>> new space beyond pool
>> delete space beyond pool
-- loop i = 5
beyondAllocTimes = 13
beyondFreeTimes = 12
allocateTimes = 33
allocateSpace = 3872
deallocateTimes = 33
deallocateSpace = 3872
freeSpace = 0
freeBlock(32) = 8
freeBlock(64) = 4
freeBlock(128) = 8
freeBlock(256) = 4
totalTimes = 2
total = 2560
blance = 0

>> delete space beyond pool
>> Return free bock: 32[0]
>> Return free bock: 64[1]
>> Return free bock: 128[2]
>> Return free bock: 256[3]
>> new space beyond pool
>> new space beyond pool
>> delete space beyond pool
-- loop i = 6
beyondAllocTimes = 15
beyondFreeTimes = 14
allocateTimes = 37
allocateSpace = 4352
deallocateTimes = 37
deallocateSpace = 4352
freeSpace = 0
freeBlock(32) = 8
freeBlock(64) = 4
freeBlock(128) = 8
freeBlock(256) = 4
totalTimes = 2
total = 2560
blance = 0

>> delete space beyond pool
>> Return free bock: 32[0]
>> Return free bock: 64[1]
>> Return free bock: 128[2]
>> Return free bock: 256[3]
>> new space beyond pool
>> new space beyond pool
>> delete space beyond pool
-- loop i = 7
beyondAllocTimes = 17
beyondFreeTimes = 16
allocateTimes = 41
allocateSpace = 4832
deallocateTimes = 41
deallocateSpace = 4832
freeSpace = 0
freeBlock(32) = 8
freeBlock(64) = 4
freeBlock(128) = 8
freeBlock(256) = 4
totalTimes = 2
total = 2560
blance = 0

>> delete space beyond pool
>> Return free bock: 32[0]
>> Return free bock: 64[1]
>> Return free bock: 128[2]
>> Return free bock: 256[3]
>> new space beyond pool
>> new space beyond pool
>> delete space beyond pool
-- loop i = 8
beyondAllocTimes = 19
beyondFreeTimes = 18
allocateTimes = 45
allocateSpace = 5312
deallocateTimes = 45
deallocateSpace = 5312
freeSpace = 0
freeBlock(32) = 8
freeBlock(64) = 4
freeBlock(128) = 8
freeBlock(256) = 4
totalTimes = 2
total = 2560
blance = 0

>> delete space beyond pool
>> Return free bock: 32[0]
>> Return free bock: 64[1]
>> Return free bock: 128[2]
>> Return free bock: 256[3]
>> new space beyond pool
>> new space beyond pool
>> delete space beyond pool
-- loop i = 9
beyondAllocTimes = 21
beyondFreeTimes = 20
allocateTimes = 49
allocateSpace = 5792
deallocateTimes = 49
deallocateSpace = 5792
freeSpace = 0
freeBlock(32) = 8
freeBlock(64) = 4
freeBlock(128) = 8
freeBlock(256) = 4
totalTimes = 2
total = 2560
blance = 0

>> delete space beyond pool
>> Return free bock: 32[0]
>> Return free bock: 64[1]
>> Return free bock: 128[2]
>> Return free bock: 256[3]
>> new space beyond pool
>> new space beyond pool
>> delete space beyond pool
-- loop i = 10
beyondAllocTimes = 23
beyondFreeTimes = 22
allocateTimes = 53
allocateSpace = 6272
deallocateTimes = 53
deallocateSpace = 6272
freeSpace = 0
freeBlock(32) = 8
freeBlock(64) = 4
freeBlock(128) = 8
freeBlock(256) = 4
totalTimes = 2
total = 2560
blance = 0

>> delete space beyond pool
-- out loop
beyondAllocTimes = 23
beyondFreeTimes = 23
allocateTimes = 53
allocateSpace = 6272
deallocateTimes = 53
deallocateSpace = 6272
freeSpace = 0
freeBlock(32) = 8
freeBlock(64) = 4
freeBlock(128) = 8
freeBlock(256) = 4
totalTimes = 2
total = 2560
blance = 0

|| report.blance =~? 0 [OK]
<< [PASS] tast_alloc_lot

## Summary
<< [PASS] 2
<< [FAIL] 0
